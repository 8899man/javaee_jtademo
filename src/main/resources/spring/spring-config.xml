<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">


	<!-- 扫描注解Bean -->
	<context:component-scan base-package="demo.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<!-- <context:exclude-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect" 
			/> -->
	</context:component-scan>

	<context:annotation-config />

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:config.properties</value>
		</property>
	</bean>

	<!-- 两个数据源的功用配置，方便下面直接引用 -->
	<bean id="abstractXADataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"
		init-method="init" destroy-method="close" abstract="true">
		<property name="xaDataSourceClassName"
			value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="poolSize" value="10" />
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
		<property name="borrowConnectionTimeout" value="60" />
		<property name="reapTimeout" value="20" />
		<!-- 最大空闲时间 -->
		<property name="maxIdleTime" value="60" />
		<property name="maintenanceInterval" value="60" />
		<property name="loginTimeout" value="60" />
		<property name="logWriter" value="60" />
		<property name="testQuery">
			<value>select 1</value>
		</property>

	</bean>
	<!-- 配置第一个数据源 -->
	<bean id="dataSource" parent="abstractXADataSource">
		<!-- value只要两个数据源不同就行，随便取名 -->
		<property name="uniqueResourceName" value="mysql/test" />
		<property name="xaDataSourceClassName"
			value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="xaProperties">
			<props>
				<prop key="URL">${jdbc.url}</prop>
				<prop key="user">${jdbc.username}</prop>
				<prop key="password">${jdbc.password}</prop>
			</props>
		</property>
	</bean>

	<!-- 配置第二个数据源 -->
	<bean id="dataSourceB" parent="abstractXADataSource">
		<!-- value只要两个数据源不同就行，随便取名 -->
		<property name="uniqueResourceName" value="mysql/test2" />
		<property name="xaDataSourceClassName"
			value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="xaProperties">
			<props>
				<prop key="URL">${jdbca.url}</prop>
				<prop key="user">${jdbca.username}</prop>
				<prop key="password">${jdbca.password}</prop>
			</props>
		</property>
	</bean>

	<!-- 配置mybatisSqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations" value="classpath:mapper/user/*.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="demo.doamin.user"></property>
		<property name="configLocation" value="classpath:mybatis.xml"></property>
	</bean>
	<bean id="sqlSessionFactoryB" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations" value="classpath:mapper/order/*.xml" />
		<property name="dataSource" ref="dataSourceB" />
		<property name="typeAliasesPackage" value="demo.doamin.order"></property>
		<property name="configLocation" value="classpath:mybatis.xml"></property>
	</bean>
	<bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="demo.mapper.user"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	<bean id="mapperScannerB" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="demo.mapper.order"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryB"></property>
	</bean>

	<!-- 事务这块用spring管理atomikos -->
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<property name="forceShutdown">
			<value>true</value>
		</property>
	</bean>
	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout" value="300" />
	</bean>

	<bean id="springTransactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager">
			<ref bean="atomikosTransactionManager" />
		</property>
		<property name="userTransaction">
			<ref bean="atomikosUserTransaction" />
		</property>
		<!-- 必须设置，否则程序出现异常 JtaTransactionManager does not support custom isolation 
			levels by default -->
		<property name="allowCustomIsolationLevels" value="true" />

	</bean>
	<!-- 支持 @AspectJ 标记 -->
	<aop:aspectj-autoproxy />


	<!-- 以AspectJ方式 定义 AOP -->
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* demo.service..*.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

	<!-- 配置事务传播特性:如果存在一个事务，则支持当前事务。如果没有事务则开启：REQUIRED -->
	<tx:advice id="txAdvice" transaction-manager="springTransactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="create*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="modify*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>




</beans>